# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main
variables:
  # Azure Resource Manager connection created during pipeline creation
  azureSubscription: '$(azureSubscription)'
pool:
  vmImage: ubuntu-latest
stages:
 # Start the build stage (CI)
- stage:  Build
  displayName: Build stage
  jobs:
    - job: Build
      displayName: Build
      steps:
  # Git clone autoBash2.sh script
        - script: git clone https://github.com/idosheffer/node-weight.git 
          displayName: 'AutoScript Clone'
  # Archive the git clone files as artifact in the name "drop"
        - task: ArchiveFiles@2
          displayName: 'Archive files'
          inputs:
            rootFolderOrFile: '$(System.DefaultWorkingDirectory)'
            includeRootFolder: true
            archiveType: zip
            archiveFile: $(Build.ArtifactStagingDirectory)/idoart.zip
            replaceExistingArchive: true
        - upload: $(Build.ArtifactStagingDirectory)/idoart.zip
          artifact: drop 
  # Start the deploy stage (CD)               
- stage: Deploy
  displayName: Deploy
  pool:
   vmImage: ubuntu-latest
  jobs:           
    - deployment: VMDeploy
      displayName: web
      pool:
       vmImage: 'Ubuntu-16.04'
      environment:
       name:  Deploy
       resourceType: VirtualMachine
      strategy:
       runOnce:
        deploy:
         steps:  
     # Extract the artifact to "/azagent\1\s\s\s" 
     #    - task: ExtractFiles@1
      #     inputs:
       #       cleanDestinationFolder: false 
        #      archiveFilePatterns: '/home/Ubuntu/azagent/_work/1/drop/$(Build.BuildId).zip' 
         #     destinationFolder:  '$(System.DefaultWorkingDirectory)/s'   
          #    overwriteExistingFiles: true  
     # Run the autoBash2.sh file and give him his parameters for deploy node-tracker app 
        # - task: Bash@3
        #   inputs:
        #    targetType: inline
        #    script: |
        #     sudo chmod 777 autoBash2.sh
        #     ./autoBash2.sh -u $(OKTAURL) -i $(OKTAID) -s $(OKTASECRET) -h $(POSTGRESHOST) -p $(POSTGRESPASSWORD) -n $(POSTGRESUSERNAME) 
        #    workingDirectory: '$(System.DefaultWorkingDirectory)/s/s'
         
         - task: Ansible@0
           inputs:
             ansibleInterface: 'agentMachine'
             playbookPathOnAgentMachine: '/etc/ansible/myfirstplaybook.yml'
             inventoriesAgentMachine: 'noInventory'
             args: '--extra-vars "OKTAURL=$(OKTAURL) OKTAID=$(OKTAID) OKTASECRET=$(OKTASECRET) POSTGRESHOST=$(POSTGRESHOST) POSTGRESPASSWORD=$(POSTGRESPASSWORD) POSTGRESUSERNAME=$(POSTGRESUSERNAME)"'
             failOnStdErr: false
             
         - task: ManualValidation@0
           timeoutInMinutes: 1440 # task times out in 1 day
           inputs:
            notifyUsers: |
             Idosheffer99@gmail.com
            instructions: 'Please validate the build configuration and resume'
            onTimeout: 'resume' 

            

             
            
    
         
             

       
              
        
