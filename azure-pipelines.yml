# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main
variables:
  # Azure Resource Manager connection created during pipeline creation
  azureSubscription: '$(azureSubscription)'
pool:
  vmImage: ubuntu-latest
stages:
- stage:  Build
  displayName: Build stage
  jobs:
    - job: Build
      displayName: Build
      steps:
        - script: git clone https://github.com/idosheffer/AutoRepo.git
          displayName: 'AutoScript Clone'

        - script: |
              echo Add other tasks to build, test, and deploy your project.
              echo See https://aka.ms/yaml
          displayName: 'AutoScript chmod'

        - task: ArchiveFiles@2
          displayName: 'Archive files'
          inputs:
            rootFolderOrFile: '$(System.DefaultWorkingDirectory)'
            includeRootFolder: true
            archiveType: zip
            archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
            replaceExistingArchive: true
        - upload: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
          artifact: drop        
- stage: Deploy
  displayName: Deploy
  pool:
   vmImage: ubuntu-latest
  jobs:           
    - deployment: VMDeploy
      displayName: web
      pool:
       vmImage: 'Ubuntu-16.04'
      environment:
       name:  Deploy
       resourceType: VirtualMachine
      strategy:
       runOnce:
        deploy:
         steps:   
         - task: ExtractFiles@1
           inputs:
              cleanDestinationFolder: false 
              archiveFilePatterns: '/home/Ubuntu/azagent/_work/1/drop/$(Build.BuildId).zip' 
              destinationFolder:  '/home/Ubuntu/azagent/_work/1/drop/'   
              overwriteExistingFiles: true  
         - task: Bash@3
           inputs:
            targetType: inline
            script: |
             sudo chmod 777 autoBash2.sh
             ./autoBash2.sh -u $(OKTAURL) -i $(OKTAID) -s $(OKTASECRET) -h $(POSTGRESHOST) -p $(POSTGRESPASSWORD) -n $(POSTGRESUSERNAME) 
            workingDirectory: '/home/Ubuntu/azagent/_work/1/drop/s'
    
         
             

       
              
        
